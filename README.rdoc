Verboten is a lightweight authorization gem for Rails working on the
principle that everything is forbidden unless it is explicitly
permitted.

Simply including the module 'Verboten' into your controllers disables
all actions by default and defines two new methods, 'permit' and
'before_authorization_filter'. The former is used to permit actions
selectively. The latter makes sure certain before filters run before
authorization is tested, so that they can set the required instance
variables.

The most straightforward way to use it is to first forbid all actions
in the application controller:

  class ApplicationController < ActionController::Base
    include Verboten # -- forbid everything everywhere

    def current_user
      # ... (however you do authentication) ...
    end
  end

Then in the individual controllers specify which actions to permit:

  class PostsController < ApplicationController
    # -- find_post() sets @post, which is_author() reads
    before_authorization_filter :find_post, :except => [:index, :new, :create]

    permit :index, :show
    permit :new,  :create,           :if => :logged_in
    permit :edit, :update, :destroy, :if => :is_author,
                                     :message => "Must be the author."

    # ... (actions go here) ...

    private

    def find_post
      @post = Post.find_by_id(params[:id])
    end
  
    def is_author
      @post && @post.user == current_user
    end

    # the logged_in() method is predefined (depends on current_user())
  end

Copyright (c) 2010 ANU
